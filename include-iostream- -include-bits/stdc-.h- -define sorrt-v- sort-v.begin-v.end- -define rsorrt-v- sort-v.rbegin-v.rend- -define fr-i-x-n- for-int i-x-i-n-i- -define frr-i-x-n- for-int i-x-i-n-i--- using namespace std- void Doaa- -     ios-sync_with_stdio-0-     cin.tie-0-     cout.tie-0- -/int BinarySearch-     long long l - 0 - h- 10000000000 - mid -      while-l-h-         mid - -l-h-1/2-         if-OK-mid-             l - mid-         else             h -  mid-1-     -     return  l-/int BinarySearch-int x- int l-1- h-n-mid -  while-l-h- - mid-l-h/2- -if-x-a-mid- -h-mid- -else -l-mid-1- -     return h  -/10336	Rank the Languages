#include<iostream>
#include<bits/stdc++.h>
#define sorrt(v) sort(v.begin(),v.end())
#define rsorrt(v) sort(v.rbegin(),v.rend())
#define fr(i,x,n) for(int i=x;i<n;i++)
#define frr(i,x,n) for(int i=x;i>=n;i--)
using namespace std;
void Doaa()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}

/*int BinarySearch(){
    long long l = 0 , h= 10000000000 , mid ;

    while(l<h){
        mid = (l+h+1)/2;
        if(OK(mid))
            l = mid;
        else
            h =  mid-1;
    }
    return  l;
    }*/
/*int BinarySearch(int x){
int l=1, h=n,mid ;
 while(l<h){
		 mid=(l+h)/2;
		if(x<=a[mid])
			h=mid;
		else
			l=mid+1;
	}
    return h  ;
    }*/
char grid[100][100];
int x[4]={0,0,1,-1},y[4]={1,-1,0,0},n,m;
bool seen[35][35];
bool ongread(int i,int j){return i>=0 && i<n&&j<m ;}
void dfs(int i,int j)
{
   if(seen[i][j])
    return;
   seen[i][j]=1;
   fr(k,0,8)
   {
       int tox=i+x[k],toy=j+y[k];
       if(ongread(tox,toy)&&!seen[tox][toy]&&grid[tox][toy]==grid[i][j])
           dfs(tox,toy);
   }
}
bool cmp(pair<char,int> a, pair<char,int> b)
{
    if(a.second > b.second)
       return true;
    else if(a.second < b.second)
            return false;

    return a.first < b.first;
}
int main(){
Doaa();
int c=1,t;
cin>>t;
while(t--)
{
  cin>>n>>m;
   fr(i,0,n)
   fr(j,0,m)
     cin>>grid[i][j];
memset(seen,0,sizeof(seen));
map<char,int>mp;
  int ans=0;
   fr(i,0,n)
    fr(j,0,m)
       if(!seen[i][j])
        {
            dfs(i,j);
            mp[grid[i][j]]++;
        }
map<char,int>::iterator it;
vector< pair<char,int> > v;
cout<<"World #"<<c<<endl;
for(it=mp.begin();it!=mp.end();it++)
    v.push_back({it->first,it->second});
sort(v.begin(),v.end(),cmp);
fr(i,0,v.size())
cout<<v[i].first<<": "<<v[i].second<<endl;
c++;
}
return 0;
}
